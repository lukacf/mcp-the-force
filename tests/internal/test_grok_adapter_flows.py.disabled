"""Integration tests for Grok adapter complete tool execution flows.

These tests verify the end-to-end interaction between GrokAdapter and tool adapters,
testing the complete workflow from LLM tool calls through tool execution to final response.
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch

from mcp_second_brain.adapters.grok.adapter import GrokAdapter


@pytest.fixture
def mock_openai_client():
    """Mock OpenAI client for Grok adapter testing."""
    client = MagicMock()
    client.chat = MagicMock()
    client.chat.completions = MagicMock()
    return client


@pytest.fixture
def grok_adapter_with_mock(mock_openai_client, mock_env):
    """Create Grok adapter with mocked OpenAI client."""
    with patch("mcp_second_brain.adapters.grok.adapter.AsyncOpenAI") as mock_openai:
        mock_openai.return_value = mock_openai_client

        adapter = GrokAdapter(model_name="grok-4")
        adapter.client = mock_openai_client
        return adapter


class TestGrokAdapterIntegrationFlows:
    """Test complete Grok adapter tool execution flows."""

    @pytest.mark.asyncio
    async def test_tool_execution_search_project_memory_integration(
        self, run_tool, parse_adapter_response
    ):
        """Integration test: Complete tool execution flow using MockAdapter."""
        # This tests the full end-to-end flow: 
        # Tool executor -> GrokAdapter -> Tool dispatch -> MockAdapter response
        
        result = await run_tool(
            "chat_with_grok4",
            instructions="Search for Python programming information",
            output_format="Provide detailed information",
            context=[],
            session_id="integration-test-session"
        )
        
        # Parse the MockAdapter response to verify the flow worked
        data = parse_adapter_response(result)
        
        # Verify this went through the Grok adapter (MockAdapter will tell us)
        assert data["mock"] is True
        assert data["model"] == "grok-4"
        
        # Verify session was passed correctly
        assert data["adapter_kwargs"]["session_id"] == "integration-test-session"
        
        # Verify the instructions made it through (check multiple possible locations)
        prompt_content = data.get("prompt_preview", "") + data.get("prompt", "")
        instructions_found = (
            "Search for Python programming information" in prompt_content or
            "Search for Python programming information" in str(data.get("adapter_kwargs", {}))
        )
        assert instructions_found, f"Instructions not found in response. Available keys: {list(data.keys())}"
        
        # This integration test verifies the complete tool execution pathway
        # works without testing the internal mocking details