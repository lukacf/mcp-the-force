FROM python:3.13-slim

# Install system dependencies including C++ compiler for hnswlib
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        git \
        curl \
        ca-certificates \
        procps \
        build-essential \
        g++ && \
    rm -rf /var/lib/apt/lists/*

# Install uv for faster Python package management
RUN pip install uv

# Set working directory
WORKDIR /app

# Copy project files
COPY pyproject.toml README.md LICENSE ./
COPY mcp_the_force ./mcp_the_force
COPY *.md *.py ./

# Install the package and dependencies
RUN uv pip install --system .

# Create directories for runtime
RUN mkdir -p /tmp && chmod 1777 /tmp
RUN mkdir -p /app/data  # For any data needs

# Create claude user with same UID/GID as test-runner container for consistent file permissions
ARG CLAUDE_UID=1000
ARG CLAUDE_GID=1000
RUN groupadd -g $CLAUDE_GID claude \
 && useradd -m -u $CLAUDE_UID -g claude -s /bin/bash claude

# Create a startup script for the MCP server container
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "=== Starting E2E server container ==="\n\
\n\
# Keep the container running for test operations\n\
echo "Container ready - MCP server environment prepared"\n\
tail -f /dev/null\n\
' > /startup.sh && chmod +x /startup.sh

# Create a simple health check script
RUN echo '#!/bin/bash\n\
# Basic container health check\n\
echo "Container is healthy"\n\
exit 0\n\
' > /health.sh && chmod +x /health.sh

# No port exposure needed - MCP runs over stdio

# Add health check
HEALTHCHECK --interval=5s --timeout=3s --retries=10 --start-period=10s \
    CMD /health.sh

# Run the startup script by default
CMD ["/startup.sh"]