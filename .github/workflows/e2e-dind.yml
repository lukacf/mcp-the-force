name: E2E Tests (Docker-in-Docker)

on:
  push:
    branches: [main]  # Only on merge to main
  schedule:
    # Run nightly to catch any environmental drift or new flakiness
    - cron: '0 2 * * *'
  workflow_dispatch: # Allows manual runs

jobs:
  e2e-test-suite:
    name: E2E - ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    # Give each job a 15-minute timeout, well above the longest test
    timeout-minutes: 15
    
    strategy:
      # CRITICAL: Do not cancel other jobs if one fails.
      # This ensures you get a complete report of all broken scenarios.
      fail-fast: false
      matrix:
        scenario:
          - smoke               # Basic health check for all adapters
          - attachments         # File attachment handling  
          - stable_list         # List operations stability
          - priority_context    # Context prioritization
          - session_management  # Session continuity
          - environment         # Environment setup validation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Test Runner and Server Docker Images
        id: docker_build
        run: |
          docker build -f tests/e2e_dind/Dockerfile.runner -t mcp-e2e-runner:latest .
          docker build -f tests/e2e_dind/Dockerfile.server -t mcp-e2e-server:latest .
        
      - name: Run E2E Test Scenario
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          VERTEX_PROJECT: ${{ vars.VERTEX_PROJECT }}
          VERTEX_LOCATION: ${{ vars.VERTEX_LOCATION }}
        run: |
          # Check if Google Cloud credentials are available
          if [ -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" ]; then
            # Use service account credentials if available
            echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}' | base64 -d > /tmp/gcp-creds.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-creds.json
            export ADC_JSON_B64='${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}'
          fi
          
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/host-project \
            -w /host-project/tests/e2e_dind \
            -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            -e ANTHROPIC_API_KEY='${{ secrets.ANTHROPIC_API_KEY }}' \
            -e VERTEX_PROJECT='${{ vars.VERTEX_PROJECT }}' \
            -e VERTEX_LOCATION='${{ vars.VERTEX_LOCATION }}' \
            -e GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-}" \
            -e ADC_JSON_B64="${ADC_JSON_B64:-}" \
            mcp-e2e-runner:latest \
            scenarios/test_${{ matrix.scenario }}.py -v --tb=short

      - name: Upload Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs-${{ matrix.scenario }}
          path: |
            /tmp/artifacts/*.log
          if-no-files-found: ignore