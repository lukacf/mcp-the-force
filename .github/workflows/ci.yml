name: CI Tests

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system ruff mypy
      
      - name: Run ruff
        run: ruff check .
      
      - name: Run mypy
        run: mypy --install-types --non-interactive mcp_second_brain || echo "::warning::MyPy check failed - fix before 1.0 release"

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system -e ".[test]"
      
      - name: Run unit tests
        run: pytest tests/unit -v --cov=mcp_second_brain --cov-report=xml --cov-report=term
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unit,py${{ matrix.python-version }}
          name: coverage-py${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    # Only run on main branch, feature branches, or if PR is from the same repo (has access to secrets)
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/') || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system -e ".[test]"
      
      - name: Install pytest-anyio
        run: pip install pytest-anyio
      
      - name: Run internal integration tests
        env:
          # Internal tests use MockAdapter - must be set before Python starts
          MCP_ADAPTER_MOCK: "1"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy-key-for-mocks' }}
          VERTEX_PROJECT: ${{ secrets.VERTEX_PROJECT || 'dummy-project' }}
          VERTEX_LOCATION: ${{ secrets.VERTEX_LOCATION || 'us-central1' }}
        run: |
          # Verify env var is set
          echo "MCP_ADAPTER_MOCK=$MCP_ADAPTER_MOCK"
          # Internal tests need asyncio support
          pytest tests/internal -v
          
      - name: Run MCP integration tests
        env:
          MCP_ADAPTER_MOCK: "1"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy-key-for-mocks' }}
          VERTEX_PROJECT: ${{ secrets.VERTEX_PROJECT || 'dummy-project' }}
          VERTEX_LOCATION: ${{ secrets.VERTEX_LOCATION || 'us-central1' }}
        run: |
          # MCP tests use anyio, so disable asyncio to avoid conflicts
          pytest tests/integration_mcp -v -p no:asyncio
        timeout-minutes: 10


  all-tests-passed:
    needs: [lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check if all tests passed
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.unit-tests.result }}" != "success" || \
                "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "One or more required tests failed"
            exit 1
          fi
          echo "All required tests passed!"