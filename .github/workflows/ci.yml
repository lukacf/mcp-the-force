name: CI Tests

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.13"
  MCP_ADAPTER_MOCK: "1"  # Set globally to ensure all Python processes see it

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system ruff mypy
      
      - name: Run linting and static analysis
        run: make lint || echo "::warning::Linting failed - fix before 1.0 release"

  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-py313-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-py313-
      
      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system -e ".[test]"
      
      - name: Run unit tests
        run: make test-unit
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unit,py313
          name: coverage-py313
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    # Only run on main branch, feature branches, or if PR is from the same repo (has access to secrets)
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/') || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system -e ".[test]"
      
      - name: Run CI diagnostics
        run: |
          echo "=== CI Environment Diagnostics ==="
          python --version
          echo "Python path: $(which python)"
          echo "Pytest version: $(pytest --version)"
          echo "Running diagnostic script..."
          python tests/diagnose_ci.py || true
      
      - name: Run integration tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy-key-for-mocks' }}
          VERTEX_PROJECT: ${{ secrets.VERTEX_PROJECT || 'dummy-project' }}
          VERTEX_LOCATION: ${{ secrets.VERTEX_LOCATION || 'us-central1' }}
        run: make test-integration
        timeout-minutes: 10


  all-tests-passed:
    needs: [lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check if all tests passed
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.unit-tests.result }}" != "success" || \
                "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "One or more required tests failed"
            exit 1
          fi
          echo "All required tests passed!"