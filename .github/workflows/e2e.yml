name: E2E Tests

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger
  push:
    branches:
      - main
      - feature/comprehensive-testing
    paths:
      - 'mcp_second_brain/**'
      - 'tests/e2e/**'
      - 'Dockerfile.e2e'
      - '.github/workflows/e2e.yml'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build E2E test image
      run: docker build -f Dockerfile.e2e -t mcp-e2e:latest .
    
    - name: Set up Google Cloud credentials
      env:
        GOOGLE_CREDS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        GCLOUD_USER_REFRESH_TOKEN: ${{ secrets.GCLOUD_USER_REFRESH_TOKEN }}
        GCLOUD_OAUTH_CLIENT_ID: ${{ secrets.GCLOUD_OAUTH_CLIENT_ID }}
        GCLOUD_OAUTH_CLIENT_SECRET: ${{ secrets.GCLOUD_OAUTH_CLIENT_SECRET }}
      run: |
        if [ -n "$GOOGLE_CREDS_JSON" ]; then
          # Use service account if available
          echo "$GOOGLE_CREDS_JSON" > /tmp/gcloud-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcloud-key.json" >> "$GITHUB_ENV"
        elif [ -n "$GCLOUD_USER_REFRESH_TOKEN" ]; then
          # Use user credentials via ADC
          echo "::add-mask::$GCLOUD_USER_REFRESH_TOKEN"
          echo "::add-mask::$GCLOUD_OAUTH_CLIENT_ID"
          echo "::add-mask::$GCLOUD_OAUTH_CLIENT_SECRET"
          
          # Create ADC file
          source scripts/create-adc.sh
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS" >> "$GITHUB_ENV"
        fi
    
    - name: Run E2E tests
      env:
        CI_E2E: "1"
        CI: "1"
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        VERTEX_PROJECT: ${{ secrets.VERTEX_PROJECT }}
        VERTEX_LOCATION: ${{ secrets.VERTEX_LOCATION }}
        GCLOUD_USER_REFRESH_TOKEN: ${{ secrets.GCLOUD_USER_REFRESH_TOKEN }}
        GCLOUD_OAUTH_CLIENT_ID: ${{ secrets.GCLOUD_OAUTH_CLIENT_ID }}
        GCLOUD_OAUTH_CLIENT_SECRET: ${{ secrets.GCLOUD_OAUTH_CLIENT_SECRET }}
      run: |
        # Set up Docker run command
        DOCKER_CMD="docker run --rm"
        DOCKER_CMD="$DOCKER_CMD -e CI_E2E"
        DOCKER_CMD="$DOCKER_CMD -e CI"
        DOCKER_CMD="$DOCKER_CMD -e OPENAI_API_KEY"
        DOCKER_CMD="$DOCKER_CMD -e ANTHROPIC_API_KEY"
        DOCKER_CMD="$DOCKER_CMD -e VERTEX_PROJECT"
        DOCKER_CMD="$DOCKER_CMD -e VERTEX_LOCATION"
        
        # Add refresh token auth if available
        if [ -n "$GCLOUD_USER_REFRESH_TOKEN" ]; then
          DOCKER_CMD="$DOCKER_CMD -e GCLOUD_USER_REFRESH_TOKEN"
          # OAuth client ID/secret are optional - entrypoint.sh will use gcloud defaults if not provided
          [ -n "$GCLOUD_OAUTH_CLIENT_ID" ] && DOCKER_CMD="$DOCKER_CMD -e GCLOUD_OAUTH_CLIENT_ID"
          [ -n "$GCLOUD_OAUTH_CLIENT_SECRET" ] && DOCKER_CMD="$DOCKER_CMD -e GCLOUD_OAUTH_CLIENT_SECRET"
        fi
        
        # Add Google credentials file if available (service account)
        if [ -n "$GOOGLE_APPLICATION_CREDENTIALS" ] && [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
          DOCKER_CMD="$DOCKER_CMD -e GOOGLE_APPLICATION_CREDENTIALS_JSON"
        fi
        
        # Run tests
        eval $DOCKER_CMD mcp-e2e:latest pytest tests/e2e -v --tb=short
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          **/pytest_report.xml
          **/mcp-second-brain-debug.log