name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: |
          uv pip install -e .
      
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Verify version consistency
        run: |
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$PYPROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch: pyproject.toml has $PYPROJECT_VERSION but tag is ${{ steps.version.outputs.version }}"
            exit 1
          fi
          echo "Version consistency verified: $PYPROJECT_VERSION"
      
      - name: Extract changelog for this version
        id: changelog
        run: |
          python << 'EOF'
          import re
          import sys
          
          with open('CHANGELOG.md', 'r') as f:
              content = f.read()
          
          version = "${{ steps.version.outputs.version }}"
          
          # Extract the section for this version
          pattern = rf'## \[{re.escape(version)}\].*?(?=## \[|\Z)'
          match = re.search(pattern, content, re.DOTALL)
          
          if match:
              section = match.group(0).strip()
              # Remove the version header line
              lines = section.split('\n')[1:]
              changelog_content = '\n'.join(lines).strip()
              
              # Write to GitHub output file
              with open('changelog_excerpt.md', 'w') as f:
                  f.write(changelog_content)
              print("Changelog extracted successfully")
          else:
              print(f"No changelog section found for version {version}")
              with open('changelog_excerpt.md', 'w') as f:
                  f.write(f"Release {version}")
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          body_path: changelog_excerpt.md
          draft: false
          prerelease: false
          generate_release_notes: true  # This adds auto-generated notes as well
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build package
        run: |
          uv build
      
      - name: Upload build artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}